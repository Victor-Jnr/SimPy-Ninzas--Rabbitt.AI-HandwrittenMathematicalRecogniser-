""" 
Operates on already preprocessed data sets (from ast, dot, and kaggle_all) to merge them into a single, cohesive data set.
Does simple loading, concatenation, and shuffling without additional image processing.
Returns a final merged and shuffled training/testing data set merging multiple preprocessed sources.
Merging the preprocessed datasets generated by kaggle.py from all sources into one final dataset ready to train models.
Eliminated Asterisk support as was unable to find suitable datasets
Summary:Victor-Jnr-
"""




import numpy as np
from sklearn.utils import shuffle
import cv2 as cv

path = 'treatment/treated_data/'

dot = np.load(path+'dot_training_images.npz')
dot = dot['arr_0']
dot_labels = np.load(path+'dot_training_labels.npz')
dot_labels = dot_labels['arr_0']

symbol = np.load(path+'kaggle_all_training_images.npz')
symbol = symbol['arr_0']
symbol_labels = np.load(path+'kaggle_all_training_labels.npz')
symbol_labels = symbol_labels['arr_0']

all_training_images = np.concatenate([dot, symbol])
all_training_labels = np.concatenate([dot_labels, symbol_labels])
result_symbols, result_symbols_labels = shuffle(all_training_images, all_training_labels)

training_images = []
training_labels = []

for i in range(0, len(result_symbols)):
    training_images.append(result_symbols[i])
    training_labels.append(result_symbols_labels[i])

np.savez(path + "training_images_dataset", training_images)
np.savez(path + "training_labels_dataset", training_labels)

dot_testing = np.load(path+'dot_testing_images.npz')
dot_testing = dot_testing['arr_0']
dot_testing_labels = np.load(path+'dot_testing_labels.npz')
dot_testing_labels = dot_testing_labels['arr_0']

symbol_testing = np.load(path+'kaggle_all_testing_images.npz')
symbol_testing = symbol_testing['arr_0']
symbol_testing_labels = np.load(path+'kaggle_all_testing_labels.npz')
symbol_testing_labels = symbol_testing_labels['arr_0']

all_testing_images = np.concatenate([dot_testing, symbol_testing])
all_testing_labels = np.concatenate([dot_testing_labels, symbol_testing_labels])

result_symbols_testing, result_symbols_testing_labels = shuffle(all_testing_images, all_testing_labels)

testing_images = []
testing_labels = []

for i in range(0, len(result_symbols_testing)):
    testing_images.append(result_symbols_testing[i])
    testing_labels.append(result_symbols_testing_labels[i])

np.savez(path + "testing_images_dataset", testing_images)
np.savez(path + "testing_labels_dataset", testing_labels)
